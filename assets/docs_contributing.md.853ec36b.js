import{_ as o,e as n,o as t,c as a,g as i,h as s}from"./app.4efe6a50.js";const m=JSON.parse('{"title":"Contributing to Shotover","description":"","frontmatter":{},"headers":[{"level":2,"title":"Configuring the Environment","slug":"configuring-the-environment","link":"#configuring-the-environment","children":[{"level":3,"title":"Installing Optional Tools and Libraries","slug":"installing-optional-tools-and-libraries","link":"#installing-optional-tools-and-libraries","children":[]}]},{"level":2,"title":"Building Shotover","slug":"building-shotover","link":"#building-shotover","children":[{"level":3,"title":"Building Shotover (release)","slug":"building-shotover-release","link":"#building-shotover-release","children":[]}]},{"level":2,"title":"Running the Tests","slug":"running-the-tests","link":"#running-the-tests","children":[{"level":3,"title":"Installing Cassandra CPP Driver","slug":"installing-cassandra-cpp-driver","link":"#installing-cassandra-cpp-driver","children":[]},{"level":3,"title":"Functionally Testing Shotover","slug":"functionally-testing-shotover","link":"#functionally-testing-shotover","children":[]},{"level":3,"title":"Run Shotover tests","slug":"run-shotover-tests","link":"#run-shotover-tests","children":[]}]},{"level":2,"title":"Submitting a PR","slug":"submitting-a-pr","link":"#submitting-a-pr","children":[]}],"relativePath":"docs/contributing.md"}'),r={name:"docs/contributing.md"},l=s(`<h1 id="contributing-to-shotover" tabindex="-1">Contributing to Shotover <a class="header-anchor" href="#contributing-to-shotover" aria-hidden="true">#</a></h1><p>This guide contains tips and tricks for working on Shotover Proxy itself.</p><h2 id="configuring-the-environment" tabindex="-1">Configuring the Environment <a class="header-anchor" href="#configuring-the-environment" aria-hidden="true">#</a></h2><p>Shotover is written in Rust, so make sure you have a rust toolchain installed. See <a href="https://rustup.rs/" target="_blank" rel="noreferrer">the rustup site</a> for a quick way to setup your Rust development environment.</p><p>Once you&#39;ve installed Rust via Rustup (you should just be fine with the latest stable). You will need to install a few other tools needed to compile some of Shotover&#39;s dependencies.</p><p>Shotover requires the following in order to build:</p><ul><li>gcc</li><li>g++</li><li>libssl-dev</li><li>pkg-config (Linux)</li></ul><p>On Ubuntu you can install them via <code>sudo apt-get install cmake gcc g++ libssl-dev pkg-config</code>.</p><h3 id="installing-optional-tools-and-libraries" tabindex="-1">Installing Optional Tools and Libraries <a class="header-anchor" href="#installing-optional-tools-and-libraries" aria-hidden="true">#</a></h3><h4 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-hidden="true">#</a></h4><p>While not required for building Shotover, installing <code>docker</code> and <code>docker-compose</code> will allow you to run Shotover&#39;s integration tests and also build the static libc version of Shotover.</p><h4 id="libpcap-dev" tabindex="-1">libpcap-dev <a class="header-anchor" href="#libpcap-dev" aria-hidden="true">#</a></h4><p>Some tests will require <code>libpcap-dev</code> to be installed as well (reading pcap files for protocol tests).</p><h2 id="building-shotover" tabindex="-1">Building Shotover <a class="header-anchor" href="#building-shotover" aria-hidden="true">#</a></h2><p>Now you can build Shotover by running <code>cargo build</code>. The executable will then be found in <code>target/debug/shotover-proxy</code>.</p><h3 id="building-shotover-release" tabindex="-1">Building Shotover (release) <a class="header-anchor" href="#building-shotover-release" aria-hidden="true">#</a></h3><p>The way you build Shotover will dramatically impact performance. To build Shotover for deployment in production environments, for maximum performance or for any benchmarking use <code>cargo build --release</code>. The resulting executable will be found in <code>target/release/shotover-proxy</code>.</p><h2 id="running-the-tests" tabindex="-1">Running the Tests <a class="header-anchor" href="#running-the-tests" aria-hidden="true">#</a></h2><p>The Cassandra tests require the Cassandra CPP driver.</p><h3 id="installing-cassandra-cpp-driver" tabindex="-1">Installing Cassandra CPP Driver <a class="header-anchor" href="#installing-cassandra-cpp-driver" aria-hidden="true">#</a></h3><p>Installation information and dependencies for the Cassandra CPP driver can be found <a href="https://docs.datastax.com/en/developer/cpp-driver/2.4/" target="_blank" rel="noreferrer">here</a>.</p><h4 id="ubuntu-18-04" tabindex="-1">Ubuntu 18.04 <a class="header-anchor" href="#ubuntu-18-04" aria-hidden="true">#</a></h4><p>These instructions are for Ubuntu 18.04, other platform installations will be similar.</p><ol><li>Download the driver packages and the libuv dependency.</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">wget https://downloads.datastax.com/cpp-driver/ubuntu/18.04/cassandra/v2.16.0/cassandra-cpp-driver_2.16.0-1_amd64.deb </span><span style="color:#89DDFF;">&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">wget https://downloads.datastax.com/cpp-driver/ubuntu/18.04/cassandra/v2.16.0/cassandra-cpp-driver-dev_2.16.0-1_amd64.deb </span><span style="color:#89DDFF;">&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">wget https://downloads.datastax.com/cpp-driver/ubuntu/18.04/dependencies/libuv/v1.35.0/libuv1_1.35.0-1_amd64.deb </span><span style="color:#89DDFF;">&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">wget https://downloads.datastax.com/cpp-driver/ubuntu/18.04/dependencies/libuv/v1.35.0/libuv1-dev_1.35.0-1_amd64.deb </span><span style="color:#89DDFF;">&amp;</span></span>
<span class="line"><span style="color:#82AAFF;">wait</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>Install them using the <code>apt</code> tool</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">sudo apt -y install ./cassandra-cpp-driver_2.16.0-1_amd64.deb ./cassandra-cpp-driver-dev_2.16.0-1_amd64.deb ./libuv1_1.35.0-1_amd64.deb ./libuv1-dev_1.35.0-1_amd64.deb</span></span>
<span class="line"></span></code></pre></div><h3 id="functionally-testing-shotover" tabindex="-1">Functionally Testing Shotover <a class="header-anchor" href="#functionally-testing-shotover" aria-hidden="true">#</a></h3><p>To setup Shotover for functional testing perform the following steps:</p><ol><li>Find an example in <code>example-configs/</code> that is closest to your use case. <ul><li>If you don&#39;t know what you want, we suggest starting with <code>example-configs/redis-passthrough</code>.</li></ul></li><li>Copy the <code>topology.yaml</code> file from that example to <code>config/topology.yaml</code>.</li><li>Do one of the following: <ul><li>In the example directory you copied the <code>topology.yaml</code> from, run: <code>docker-compose -f docker-compose.yaml up</code>.</li><li>Modify <code>config/topology.yaml</code> to point to a service you have setup and want to use.</li></ul></li><li>Run <code>cargo run</code>. Or <code>cargo run --release</code> to run with optimizations.</li><li>Connect to Shotover using the relevant client. <ul><li>For example <code>example-configs/redis-passthrough</code> sets up Shotover as a simple redis proxy on the default redis port, so you can connect by just running <code>redis-cli</code>.</li></ul></li></ol><h3 id="run-shotover-tests" tabindex="-1">Run Shotover tests <a class="header-anchor" href="#run-shotover-tests" aria-hidden="true">#</a></h3><p>Run <code>cargo test</code>, refer to the <a href="https://doc.rust-lang.org/cargo/commands/cargo-test.html" target="_blank" rel="noreferrer">cargo test documentation</a> for more information.</p><h2 id="submitting-a-pr" tabindex="-1">Submitting a PR <a class="header-anchor" href="#submitting-a-pr" aria-hidden="true">#</a></h2><p>Before submitting a PR you can run the following to ensure it will pass CI:</p><ul><li>Run <code>cargo fmt</code></li><li>Run <code>cargo clippy</code> - Ensure you haven&#39;t introduced any warnings.</li><li>Run <code>cargo build --all-targets</code> - Ensure everything still builds and you haven&#39;t introduced any warnings.</li><li>Run <code>cargo test</code> - All tests pass.</li></ul>`,35);function d(c,u,h,p,g,v){const e=n("Footer");return t(),a("div",null,[l,i(e)])}const f=o(r,[["render",d]]);export{m as __pageData,f as default};
