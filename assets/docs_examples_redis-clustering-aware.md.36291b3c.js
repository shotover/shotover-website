import{_ as e,e as a,o as n,c as o,g as l,h as p}from"./app.0afedf10.js";const F=JSON.parse('{"title":"Redis Clustering with cluster aware client","description":"","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]},{"level":2,"title":"Starting","slug":"starting","link":"#starting","children":[]},{"level":2,"title":"Testing","slug":"testing","link":"#testing","children":[]}],"relativePath":"docs/examples/redis-clustering-aware.md"}'),t={name:"docs/examples/redis-clustering-aware.md"},r=p(`<h1 id="redis-clustering-with-cluster-aware-client" tabindex="-1">Redis Clustering with cluster aware client <a class="header-anchor" href="#redis-clustering-with-cluster-aware-client" aria-hidden="true">#</a></h1><p>The following guide shows you how to configure Shotover to support proxying Redis cluster <em>aware</em> clients to <a href="https://redis.io/topics/cluster-spec" target="_blank" rel="noreferrer">Redis cluster</a>.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-hidden="true">#</a></h2><p>In this example, we will be connecting to a Redis cluster that has the following topology:</p><ul><li><code>172.16.1.2:6379</code></li><li><code>172.16.1.3:6379</code></li><li><code>172.16.1.4:6379</code></li><li><code>172.16.1.5:6379</code></li><li><code>172.16.1.6:6379</code></li><li><code>172.16.1.7:6379</code></li></ul><p>Shotover will be deployed as a sidecar to each node in the Redis cluster, listening on <code>6380</code>. Use the following <a href="https://github.com/shotover/shotover-proxy/blob/main/shotover-proxy/example-configs-docker/redis-cluster-ports-rewrite/docker-compose.yaml" target="_blank" rel="noreferrer">docker-compose.yaml</a> to run the Redis cluster and Shotover sidecars.</p><div class="language-make"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">-L</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">https</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">//raw.githubusercontent.com/shotover/shotover-proxy/main/shotover-proxy/example-configs-docker/redis-cluster-ports-rewrite/docker-compose.yaml --output docker-compose.yaml</span></span>
<span class="line"></span></code></pre></div><p>Below we can see an example of a Redis node and it&#39;s Shotover sidecar. Notice they are running on the same network address (<code>172.16.1.2</code>) and the present directory is being mounted to allow Shotover to access the config and topology files.</p><div class="language-YAML"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki"><code><span class="line"></span>
<span class="line"><span style="color:#F07178;">redis-node-0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bitnami/redis-cluster:6.0-debian-10</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">networks</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">cluster_subnet</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">ipv4_address</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">172.16.1.2</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">environment</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ALLOW_EMPTY_PASSWORD=yes</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">REDIS_NODES=redis-node-0 redis-node-1 redis-node-2</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">shotover-0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">restart</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">always</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">depends_on</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">redis-node-0</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">shotover/shotover-proxy</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">network_mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">service:redis-node-0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bind</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">source</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">$PWD</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/config</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>In this example we will use <code>redis-benchmark</code> with cluster mode enabled as our Redis cluster aware client application.</p><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-hidden="true">#</a></h2><p>First we will modify our <code>topology.yaml</code> file to have a single Redis source. This will:</p><ul><li>Define how Shotover listens for incoming connections from our client application (<code>redis-benchmark</code>).</li><li>Configure Shotover to connect to the Redis node via our defined remote address.</li><li>Configure Shotover to rewrite all Redis ports with our Shotover port when the cluster aware driver is talking to the cluster, through Shotover.</li><li>Connect our Redis Source to our Redis cluster sink (transform).</li></ul><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;">#</span><span style="color:#C3E88D;">include ../../../shotover-proxy/example-configs-docker/redis-cluster-ports-rewrite/topology.yaml</span><span style="color:#89DDFF;">}}</span></span>
<span class="line"></span></code></pre></div><p>Modify an existing <code>topology.yaml</code> or create a new one and place the above example as the file&#39;s contents.</p><p>You will also need a <a href="https://raw.githubusercontent.com/shotover/shotover-proxy/main/shotover-proxy/config/config.yaml" target="_blank" rel="noreferrer">config.yaml</a> to run Shotover.</p><div class="language-make"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">-L</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">https</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">//raw.githubusercontent.com/shotover/shotover-proxy/main/shotover-proxy/example-configs-docker/redis-cluster-ports-rewrite/config.yaml --output config.yaml</span></span>
<span class="line"></span></code></pre></div><h2 id="starting" tabindex="-1">Starting <a class="header-anchor" href="#starting" aria-hidden="true">#</a></h2><p>We can now start the services with:</p><div class="language-make"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">docker-compose up -d</span></span>
<span class="line"></span></code></pre></div><h2 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-hidden="true">#</a></h2><p>With everything now up and running, we can test out our client application. Let&#39;s start it up!</p><p>First we will run <code>redis-benchmark</code> directly on our cluster.</p><div class="language-make"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">redis-benchmark -h 172.16.1.2 -p 6379 -t set,get --cluster </span></span>
<span class="line"></span></code></pre></div><p>If everything works correctly you should see the following, along with the benchmark results which have been omitted for brevity. Notice all traffic is going through the Redis port on <code>6379</code>.</p><div class="language-make"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">Cluster</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">has</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">master</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">nodes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">Master</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">0</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> d5eaf45804215f80cfb661928c1a84e1da7406a9 172.16.1.3:6379</span></span>
<span class="line"><span style="color:#82AAFF;">Master</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> d774cd063e430d34a71bceaab851d7744134e22f 172.16.1.2:6379</span></span>
<span class="line"><span style="color:#82AAFF;">Master</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 04b301f1b165d81d5fb86e50312e9cc4898cbcce 172.16.1.4:6379</span></span>
<span class="line"></span></code></pre></div><p>Now run it again but on the Shotover port this time.</p><div class="language-make"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">redis-benchmark -h 172.16.1.2 -p 6380 -t set,get --cluster </span></span>
<span class="line"></span></code></pre></div><p>You should see the following, notice that all traffic is going through Shotover on <code>6380</code> instead of the Redis port of <code>6379</code>:</p><div class="language-make"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">Cluster</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">has</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">master</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">nodes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">Master</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">0</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 04b301f1b165d81d5fb86e50312e9cc4898cbcce 172.16.1.4:6380</span></span>
<span class="line"><span style="color:#82AAFF;">Master</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> d5eaf45804215f80cfb661928c1a84e1da7406a9 172.16.1.3:6380</span></span>
<span class="line"><span style="color:#82AAFF;">Master</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> d774cd063e430d34a71bceaab851d7744134e22f 172.16.1.2:6380</span></span>
<span class="line"></span></code></pre></div>`,30);function c(i,d,y,A,C,h){const s=a("Footer");return n(),o("div",null,[r,l(s)])}const u=e(t,[["render",c]]);export{F as __pageData,u as default};
