import{_ as t,e as a,o,c as r,g as d,h as s}from"./app.0afedf10.js";const _=JSON.parse('{"title":"Metrics","description":"","frontmatter":{},"headers":[{"level":2,"title":"Metric data types","slug":"metric-data-types","link":"#metric-data-types","children":[{"level":3,"title":"Counter","slug":"counter","link":"#counter","children":[]},{"level":3,"title":"Histogram","slug":"histogram","link":"#histogram","children":[]},{"level":3,"title":"Gauge","slug":"gauge","link":"#gauge","children":[]}]}],"relativePath":"docs/user-guide/observability.md"}'),n={name:"docs/user-guide/observability.md"},c=s(`<h1 id="metrics" tabindex="-1">Metrics <a class="header-anchor" href="#metrics" aria-hidden="true">#</a></h1><p>This interface will serve Prometheus metrics from <code>/metrics</code>. The following metrics are included by default, others are transform specific.</p><table><thead><tr><th>Name</th><th>Labels</th><th>Data type</th><th>Description</th></tr></thead><tbody><tr><td><code>shotover_transform_total</code></td><td><code>transform</code></td><td><a href="#counter">counter</a></td><td>Counts the amount of times the <code>transform</code> is used</td></tr><tr><td><code>shotover_transform_failures</code></td><td><code>transform</code></td><td><a href="#counter">counter</a></td><td>Counts the amount of times the <code>transform</code> fails</td></tr><tr><td><code>shotover_transform_latency</code></td><td><code>transform</code></td><td><a href="#histogram">histogram</a></td><td>The latency for running <code>transform</code></td></tr><tr><td><code>shotover_chain_total</code></td><td><code>chain</code></td><td><a href="#counter">counter</a></td><td>Counts the amount of times <code>chain</code> is used</td></tr><tr><td><code>shotover_chain_failures</code></td><td><code>chain</code></td><td><a href="#counter">counter</a></td><td>Counts the amount of times <code>chain</code> fails</td></tr><tr><td><code>shotover_chain_latency</code></td><td><code>chain</code></td><td><a href="#histogram">histogram</a></td><td>The latency for running <code>chain</code></td></tr><tr><td><code>shotover_available_connections</code></td><td><code>source</code></td><td><a href="#gauge">gauge</a></td><td>The number of connections currently connected to <code>source</code></td></tr></tbody></table><h2 id="metric-data-types" tabindex="-1">Metric data types <a class="header-anchor" href="#metric-data-types" aria-hidden="true">#</a></h2><h3 id="counter" tabindex="-1">Counter <a class="header-anchor" href="#counter" aria-hidden="true">#</a></h3><p>A single value, which can only be incremented, not decremented. Starts out with an initial value of zero.</p><h3 id="histogram" tabindex="-1">Histogram <a class="header-anchor" href="#histogram" aria-hidden="true">#</a></h3><p>Measures the distribution of values for a set of measurements and starts with no initial values.</p><h3 id="gauge" tabindex="-1">Gauge <a class="header-anchor" href="#gauge" aria-hidden="true">#</a></h3><p>A single value that can increment or decrement over time. Starts out with an initial value of zero.</p><h1 id="log-levels-and-filters" tabindex="-1">Log levels and filters <a class="header-anchor" href="#log-levels-and-filters" aria-hidden="true">#</a></h1><p>You can configure log levels and filters at <code>/filter</code>. This can be done by a POST HTTP request to the <code>/filter</code> endpoint with the <code>env_filter</code> string set as the POST data. For example:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">curl -X PUT -d </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">info,shotover_proxy=info</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> http://127.0.0.1:9001/filter</span></span>
<span class="line"></span></code></pre></div>`,13);function i(l,h,u,f,m,p){const e=a("Footer");return o(),r("div",null,[c,d(e)])}const v=t(n,[["render",i]]);export{_ as __pageData,v as default};
