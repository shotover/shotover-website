import{_ as n,e as a,o as e,c as o,g as l,h as p}from"./app.4efe6a50.js";const C=JSON.parse('{"title":"Configuration","description":"","frontmatter":{},"headers":[{"level":2,"title":"configuration.yaml","slug":"configuration-yaml","link":"#configuration-yaml","children":[{"level":3,"title":"main_log_level","slug":"main-log-level","link":"#main-log-level","children":[]},{"level":3,"title":"observability_interface","slug":"observability-interface","link":"#observability-interface","children":[]}]},{"level":2,"title":"topology.yaml","slug":"topology-yaml","link":"#topology-yaml","children":[{"level":3,"title":"sources","slug":"sources","link":"#sources","children":[]},{"level":3,"title":"chain_config (Chain Configuration)","slug":"chain-config-chain-configuration","link":"#chain-config-chain-configuration","children":[]},{"level":3,"title":"source_to_chain_mapping Chain Mapping","slug":"source-to-chain-mapping-chain-mapping","link":"#source-to-chain-mapping-chain-mapping","children":[]}]}],"relativePath":"docs/user-guide/configuration.md"}'),t={name:"docs/user-guide/configuration.md"},r=p(`<h1 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-hidden="true">#</a></h1><p>Shotover proxy accepts a two seperate YAML based configuration files. A configuration file specified by <code>--config-file</code> and a topology file specified by <code>--topology-file</code></p><h2 id="configuration-yaml" tabindex="-1">configuration.yaml <a class="header-anchor" href="#configuration-yaml" aria-hidden="true">#</a></h2><p>The configuration file is used to change general behavior of Shotover. Currently it supports two values:</p><ul><li>main_log_level</li><li>observability_interface</li></ul><h3 id="main-log-level" tabindex="-1">main_log_level <a class="header-anchor" href="#main-log-level" aria-hidden="true">#</a></h3><p>This is a single string that you can use to configure logging with Shotover. It supports <a href="https://docs.rs/env_logger/0.7.1/env_logger/" target="_blank" rel="noreferrer">env_filter</a> style configuration and filtering syntax. Log levels and filters can be dynamically changed while Shotover is still running.</p><h3 id="observability-interface" tabindex="-1">observability_interface <a class="header-anchor" href="#observability-interface" aria-hidden="true">#</a></h3><p>Shotover has an observability interface for you to collect Prometheus data from. This value will define the address and port for Shotover&#39;s observability interface. It is configured as a string in the format of <code>127.0.0.1:8080</code> for IPV4 addresses or <code>[2001:db8::1]:8080</code> for IPV6 addresses. More information is on the <a href="./observability.html">observability page</a>.</p><h2 id="topology-yaml" tabindex="-1">topology.yaml <a class="header-anchor" href="#topology-yaml" aria-hidden="true">#</a></h2><p>The topology file is currently the primary method for defining how Shotover behaves. Within the topology file you can configure sources, transforms and transform chains.</p><p>The below documentation shows you what each section does and runs through an entire example of a Shotover configuration file.</p><h3 id="sources" tabindex="-1"><code>sources</code> <a class="header-anchor" href="#sources" aria-hidden="true">#</a></h3><p>The sources top level resource is a map of named sources, to their definitions.</p><p>The sources section of the configuration file allow you to specify a source or origin for requests. You can have multiple sources and even multiple sources of the same type. Each is named to allow you to easily reference it.</p><p>A source will generally represent a database protocol and will accept connections and queries from a compatible driver. For example the Redis source will accept connections from any Redis (RESP2) driver such as <a href="https://github.com/andymccurdy/redis-py" target="_blank" rel="noreferrer">redis-py</a>.</p><p>There is a special source type, called a mpsc_chan source (named after the rust multi-producer, single consumer channel that backs it&#39;s implementation). This source will only listen to the configured topic name and the associated topic and will then pass the received messages from the channel onto it&#39;s mapped transform chain.</p><p>There are many <code>Transforms</code> that will push a message to a given topic in different ways, enabling complex asynchronous topologies to be created.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">---</span></span>
<span class="line"><span style="color:#676E95;"># The source section</span></span>
<span class="line"><span style="color:#F07178;">sources</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;"># The configured name of the source</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">my_named_redis_source</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;"># The source type and any configuration needed for it</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;"># This will generally include a listen address and port</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">Redis</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">listen_addr</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">127.0.0.1:6379</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;"># The configured name of the source</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">my_cassandra_prod</span><span style="color:#89DDFF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;"># The source type and any configuration needed for it</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;"># This will generally include a listen address and port</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">Cassandra</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">listen_addr</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">127.0.0.1:9042</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;"># The spcial mpsc_chan source, it will receive messages from a named topic</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mpsc_chan</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">Mpsc</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">topic_name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">testtopic</span></span>
<span class="line"></span></code></pre></div><h3 id="chain-config-chain-configuration" tabindex="-1"><code>chain_config</code> (Chain Configuration) <a class="header-anchor" href="#chain-config-chain-configuration" aria-hidden="true">#</a></h3><p>The <code>chain_config</code> top level resource is a map of named chains, to their definitions.</p><p>The chain_config section of the configuration file allows you to name and define a transform chain. A transform chain is represented as an array of transforms and their respective configuration. The order in which a transform chain, is the order in which a query will traverse it. So the first transform in the chain, will get the request from source first, and pass it to the second transform in the chain.</p><p>As each transform chain is synchronous, with each transform being able to call the next transform in it&#39;s chain, the response from the upstream database or generated by a transform down the chain will be passed back up the chain, allowing each transform to handle the response.</p><p>The last transform in a chain should be a &quot;terminating&quot; transform. That is, one that passes the query on to the upstream database (e.g. <code>CassandraSinkSingle</code>) or one that returns a Response on it&#39;s own ( e.g. <code>EchoSink</code>).</p><p>For example</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#F07178;">chain_config</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">example_chain</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">One</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Two</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Three</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">TerminatingTransform</span></span>
<span class="line"></span></code></pre></div><p>A query from a client will go:</p><ul><li><code>Source</code> -&gt; <code>One</code> -&gt; <code>Two</code> -&gt; <code>Three</code> -&gt; <code>TerminatingTransform</code></li></ul><p>The response (returned to the chain by the <code>TerminatingTransform</code>) will follow the reverse path:</p><ul><li><code>TerminatingTransform</code> -&gt; <code>Three</code> -&gt; <code>Two</code> -&gt; <code>One</code> -&gt; <code>Source</code></li></ul><p>Under the hood, each transform is able to call it&#39;s down-chain transform and wait on it&#39;s response. Each Transform has it&#39;s own set of configuration values, options and behavior. See <a href="./../transforms.html">Transforms</a> for details.</p><p>The following example <code>chain_config</code> has three chains:</p><ul><li><code>redis_chain</code> - Consists of a Tee, a transform that will copy the query to the named topic and <em>also</em> pass the query down-chain to a terminating transform <code>RedisSinkSingle</code> which sends to the query to a Redis server. Very similar to the <code>tee</code> linux program.</li><li><code>main_chain</code> - Also consists of a Tee that will copy queries to the same topic as the <code>redis_chain</code> before sending the query onto caching layer that will try to resolve the query from a redis cache before ending up finally sending the query to the destination Cassandra cluster via a <code>CassandraSinkSingle</code></li></ul><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># This example will replicate all commands to the DR datacenter on a best effort basis</span></span>
<span class="line"><span style="color:#FFCB6B;">---</span></span>
<span class="line"><span style="color:#F07178;">chain_config</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;"># The name of the first chain</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">redis_chain</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;"># The first transform in the chain, in this case it&#39;s the Tee transform</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">Tee</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">behavior</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Ignore</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;"># The number of message batches that the tee can hold onto in it&#39;s buffer of messages to send.</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;"># If they arent sent quickly enough and the buffer is full then tee will drop new incoming messages.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">buffer_size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10000</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;">#The child chain, that Tee will asynchronously pass requests to</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">chain</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">QueryTypeFilter</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#F07178;">filter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Read</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">Coalesce</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#F07178;">flush_when_buffered_message_count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2000</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">QueryCounter</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">DR chain</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">RedisSinkCluster</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#F07178;">first_contact_points</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">127.0.0.1:2120</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">127.0.0.1:2121</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">127.0.0.1:2122</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">127.0.0.1:2123</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">127.0.0.1:2124</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">127.0.0.1:2125</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#F07178;">connect_timeout_ms</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">#The rest of the chain, these transforms are blocking</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">QueryCounter</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Main chain</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">RedisSinkCluster</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">first_contact_points</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">127.0.0.1:2220</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">127.0.0.1:2221</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">127.0.0.1:2222</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">127.0.0.1:2223</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">127.0.0.1:2224</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">127.0.0.1:2225</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">connect_timeout_ms</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span></span>
<span class="line"></span></code></pre></div><h3 id="source-to-chain-mapping-chain-mapping" tabindex="-1"><code>source_to_chain_mapping</code> Chain Mapping <a class="header-anchor" href="#source-to-chain-mapping-chain-mapping" aria-hidden="true">#</a></h3><p>The <code>source_to_chain_mapping</code> top level resource is a map of source names to chain name. This is the binding that will link a defined source to chain and allow messages/queries generated by a source to traverse a given chain.</p><p>The below snippet would complete our entire example:</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#F07178;">source_to_chain_mapping</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">redis_prod</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">redis_chain</span></span>
<span class="line"></span></code></pre></div><p>This mapping would effectively create a solution that:</p><ul><li>All Redis requests are first batched and then sent to a remote Redis cluster in another region. This happens asynchronously and if the remote Redis cluster is unavailable it will not block operations to the current cluster.</li><li>Subsequently, all Redis actions get identified based on command type, counted and provided as a set of metrics.</li><li>The Redis request is then transform into a cluster aware request and routed to the correct node</li></ul>`,40);function c(i,y,h,D,d,u){const s=a("Footer");return e(),o("div",null,[r,l(s)])}const f=n(t,[["render",c]]);export{C as __pageData,f as default};
