import{_ as a,e as n,o,c as e,g as l,h as p}from"./app.4efe6a50.js";const u=JSON.parse('{"title":"Cassandra Cluster","description":"","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[{"level":3,"title":"Rewriting the peer ports","slug":"rewriting-the-peer-ports","link":"#rewriting-the-peer-ports","children":[]}]}],"relativePath":"docs/examples/cassandra-cluster-shotover-sidecar.md"}'),t={name:"docs/examples/cassandra-cluster-shotover-sidecar.md"},r=p(`<h1 id="cassandra-cluster" tabindex="-1">Cassandra Cluster <a class="header-anchor" href="#cassandra-cluster" aria-hidden="true">#</a></h1><p>The following guide shows you how to configure Shotover with support for proxying to a Cassandra Cluster.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-hidden="true">#</a></h2><p>In this example, we will be connecting to a Cassandra cluster that has the following topology:</p><ul><li><code>172.16.1.2:9042</code></li><li><code>172.16.1.3:9042</code></li><li><code>172.16.1.4:9042</code></li></ul><h3 id="rewriting-the-peer-ports" tabindex="-1">Rewriting the peer ports <a class="header-anchor" href="#rewriting-the-peer-ports" aria-hidden="true">#</a></h3><p>Shotover will be deployed as a sidecar to each node in the Cassandra cluster, listening on <code>9043</code>. Use the following <a href="https://raw.githubusercontent.com/shotover/shotover-proxy/cassandra-docs/shotover-proxy/example-configs-docker/cassandra-peers-rewrite/docker-compose.yaml" target="_blank" rel="noreferrer">docker-compose.yaml</a> to run the Cassandra cluster and Shotover sidecars. In this example we want to ensure that all our traffic to Cassandra goes through Shotover.</p><div class="language-make"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">-L</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">https</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">//raw.githubusercontent.com/shotover/shotover-proxy/main/shotover-proxy/example-configs-docker/cassandra-peers-rewrite/docker-compose.yaml --output docker-compose.yaml</span></span>
<span class="line"></span></code></pre></div><p>Below we can see an example of a Cassandra node and it&#39;s Shotover sidecar, notice that they are running on the same network address (<code>172.16.1.2</code>) and the present directory is being mounted to allow Shotover to access the config and topology files.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">cassandra-two</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bitnami/cassandra:4.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">networks</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">cassandra_subnet</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">ipv4_address</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">172.16.1.3</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">healthcheck</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">healthcheck</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">environment</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">environment</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">shotover-one</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">restart</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">always</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">depends_on</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cassandra-two</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">shotover/shotover-proxy</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">network_mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">service:cassandra-two</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bind</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">source</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">$PWD</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/config</span></span>
<span class="line"></span></code></pre></div><p>In this example we will use <code>cqlsh</code> to connect to our cluster.</p><h4 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-hidden="true">#</a></h4><p>First we will modify our <code>topology.yaml</code> file to have a single Cassandra source. This will:</p><ul><li>Define how Shotover listens for incoming connections from our client (<code>cqlsh</code>).</li><li>Configure Shotover to connect to the Cassandra node via our defined remote address.</li><li>Configure Shotover to rewrite all Cassandra ports with our Shotover port when the client connects</li><li>Connect our Cassandra source to our Cassandra sink (transform).</li></ul><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;">#</span><span style="color:#C3E88D;">include ../../../shotover-proxy/example-configs-docker/cassandra-peers-rewrite/topology.yaml</span><span style="color:#89DDFF;">}}</span></span>
<span class="line"></span></code></pre></div><p>Modify an existing <code>topology.yaml</code> or create a new one and place the above example as the file&#39;s contents.</p><p>You will also need a <a href="https://raw.githubusercontent.com/shotover/shotover-proxy/main/shotover-proxy/config/config.yaml" target="_blank" rel="noreferrer">config.yaml</a> to run Shotover.</p><div class="language-make"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">-L</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">https</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">//raw.githubusercontent.com/shotover/shotover-proxy/main/shotover-proxy/config/config.yaml --output config.yaml</span></span>
<span class="line"></span></code></pre></div><h4 id="starting" tabindex="-1">Starting <a class="header-anchor" href="#starting" aria-hidden="true">#</a></h4><p>We can now start the services with:</p><div class="language-make"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">docker-compose up -d</span></span>
<span class="line"></span></code></pre></div><h4 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-hidden="true">#</a></h4><p>With everything now up and running, we can test it out with our client. Let&#39;s start it up!</p><p>First we will run <code>cqlsh</code> directly on our cluster with the command:</p><div class="language-make"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">cqlsh 172.16.1.2 9042 -u cassandra -p cassandra</span></span>
<span class="line"></span></code></pre></div><p>and check the <code>system.peers_v2</code> table with the following query:</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> peer, native_port </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">system</span><span style="color:#A6ACCD;">.peers_v2;</span></span>
<span class="line"></span></code></pre></div><p>You should see the following results returned:</p><div class="language-make"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"> peer       | native_port</span></span>
<span class="line"><span style="color:#A6ACCD;">------------+-------------</span></span>
<span class="line"><span style="color:#A6ACCD;"> 172.16.1.3 |        9042</span></span>
<span class="line"><span style="color:#A6ACCD;"> 172.16.1.4 |        9042</span></span>
<span class="line"></span></code></pre></div><p>Now run it again but on the Shotover port this time, run:</p><div class="language-make"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">cqlsh 172.16.1.2 9043 -u cassandra -p cassandra</span></span>
<span class="line"></span></code></pre></div><p>and use the same query again. You should see the following results returned, notice how the <code>native_port</code> column is now the Shotover port of <code>9043</code>:</p><div class="language-make"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"> peer       | native_port</span></span>
<span class="line"><span style="color:#A6ACCD;">------------+-------------</span></span>
<span class="line"><span style="color:#A6ACCD;"> 172.16.1.3 |        9043</span></span>
<span class="line"><span style="color:#A6ACCD;"> 172.16.1.4 |        9043</span></span>
<span class="line"></span></code></pre></div><p>If everything has worked, you will be able to use Cassandra, with your connection going through Shotover!</p><h4 id="adding-rate-limiting" tabindex="-1">Adding Rate Limiting <a class="header-anchor" href="#adding-rate-limiting" aria-hidden="true">#</a></h4><p>The next section of this tutorial will cover adding rate limiting to your Cassandra cluster with Shotover. We will add the <code>RequestThrottling</code> transform to our <code>topology.yaml</code> as shown below. This transform should go at the front of the chain to prevent any unnecessary operations from occurring if a query is going to be rate limited.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">---</span></span>
<span class="line"><span style="color:#F07178;">sources</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">cassandra_prod</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">Cassandra</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">listen_addr</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.0.0.0:9043</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">chain_config</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">main_chain</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">RequestThrottling</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">max_requests_per_second</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">40000</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">CassandraPeersRewrite</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">port</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9043</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">CassandraSinkSingle</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">remote_address</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">127.0.0.1:9042</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">connect_timeout_ms</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span></span>
<span class="line"><span style="color:#F07178;">named_topics</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">testtopic</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#F07178;">source_to_chain_mapping</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">cassandra_prod</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">main_chain</span></span>
<span class="line"></span></code></pre></div><p>In this example we will set your <code>max_requests_per_second</code> to 40,000. This will allow a max of 40,000 queries per second to go through this Shotover instance, across all connections.</p><p>After completing this step you can restart your cluster with <code>docker-compose restart</code> to enable rate limiting.</p>`,39);function c(i,y,d,C,h,D){const s=n("Footer");return o(),e("div",null,[r,l(s)])}const F=a(t,[["render",c]]);export{u as __pageData,F as default};
